The following is a digest of the repository "depannage".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: depannage
Files Analyzed: 13
Total Text Size: 25.36 KB
Estimated Tokens (text only): ~6 682

--- DIRECTORY STRUCTURE ---
depannage/
├── uploads/
│   ├── audi.png [binary]
│   ├── BMW.jpg [binary]
│   ├── mercedes.jpg [binary]
│   ├── photo-1753745092338-149580417.jpg [binary]
│   ├── photo-1753827385959-731554536.png [binary]
│   ├── purepng.png [binary]
│   ├── toyat2.jpg [binary]
│   └── toyota.png [binary]
├── clean-database.js
├── database.json
├── package.json
├── README.md
└── server.js


--- FILE CONTENTS ---
============================================================
FILE: clean-database.js
============================================================
// clean-database.js
// This script cleans the requests array in database.json:
// - Removes duplicates (same id and userInfo)
// - Ensures unique ids
// - Replaces null imageUrl with a placeholder

const fs = require('fs');
const path = require('path');

const dbPath = path.join(__dirname, 'database.json');
const PLACEHOLDER = '/uploads/placeholder.png';

function cleanRequests(requests) {
  const seen = new Set();
  let nextId = 1;
  return requests.filter(req => {
    const key = req.userInfo + '|' + req.imageUrl;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  }).map(req => ({
    ...req,
    id: nextId++,
    imageUrl: req.imageUrl == null ? PLACEHOLDER : req.imageUrl
  }));
}

function main() {
  const db = JSON.parse(fs.readFileSync(dbPath, 'utf8'));
  db.requests = cleanRequests(db.requests);
  fs.writeFileSync(dbPath, JSON.stringify(db, null, 2));
  console.log('database.json cleaned successfully!');
}

main();


============================================================
FILE: database.json
============================================================
{
  "requests": [
    {
      "id": 1,
      "userInfo": "Sia bella\r\nmercedess\r\n0610864393\r\nCASABLANCA",
      "imageUrl": "/uploads/BMW.jpg",
      "status": "Completed",
      "createdAt": "2025-07-28T23:24:10.391Z",
      "updatedAt": "2025-07-28T23:34:10.803Z"
    },
    {
      "id": 2,
      "userInfo": "Ayoub\r\nAUDI\r\n06102483930\r\nCANADA",
      "imageUrl": "/uploads/toyota.png",
      "status": "In Progress",
      "createdAt": "2025-07-28T23:24:52.367Z",
      "updatedAt": "2025-07-29T21:27:21.605Z"
    },
    {
      "id": 3,
      "userInfo": "Mehdi\r\nmercedess\r\n0610864393\r\nCASABLANCA",
      "imageUrl": "/uploads/purepng.png",
      "status": "In Progress",
      "createdAt": "2025-07-28T23:24:10.391Z",
      "updatedAt": "2025-07-28T23:25:20.171Z"
    },
    {
      "id": 4,
      "userInfo": "ASSIA OUBELLA \r\nAUDI\r\n06102483930\r\nCANADA",
      "imageUrl": "/uploads/toyat2.jpg",
      "status": "In Progress",
      "createdAt": "2025-07-28T23:24:52.367Z",
      "updatedAt": "2025-07-28T23:26:21.064Z"
    },
    {
      "id": 5,
      "userInfo": "assia oubella\r\nmercedess\r\n0610864393\r\nCASABLANCA",
      "imageUrl": "/uploads/mercedes.jpg",
      "status": "In Progress",
      "createdAt": "2025-07-28T23:24:10.391Z",
      "updatedAt": "2025-07-28T23:25:20.171Z"
    },
    {
      "id": 6,
      "userInfo": "ASSIA OUBELLA \r\nAUDI\r\n06102483930\r\nCANADA",
      "imageUrl": "/uploads/photo-1753745092338-149580417.jpg",
      "status": "In Progress",
      "createdAt": "2025-07-28T23:24:52.367Z",
      "updatedAt": "2025-07-28T23:26:21.064Z"
    },
    {
      "id": 7,
      "userInfo": "Ayoun\r\nJeep\r\n0626879092\r\nCASABLANCA",
      "imageUrl": null,
      "status": "Submitted",
      "createdAt": "2025-07-29T22:15:44.793Z",
      "updatedAt": "2025-07-29T22:15:44.793Z"
    },
    {
      "id": 8,
      "userInfo": "AYOUB\r\nJEEP\r\n0626789034\r\nCASABLANCA",
      "imageUrl": "/uploads/photo-1753827385959-731554536.png",
      "status": "In Progress",
      "createdAt": "2025-07-29T22:16:25.970Z",
      "updatedAt": "2025-07-29T22:16:59.451Z"
    }
  ],
  "contacts": [
    {
      "id": 1,
      "name": "Ahmed Mechanic",
      "phone": "0612345678",
      "email": "ahmed@roadside.com",
      "role": "mechanic",
      "createdAt": "2025-07-28T23:23:09.070Z"
    },
    {
      "id": 2,
      "name": "Fatima Towing",
      "phone": "0623456789",
      "email": "fatima@roadside.com",
      "role": "towing",
      "createdAt": "2025-07-28T23:23:09.074Z"
    },
    {
      "id": 3,
      "name": "Karim Emergency",
      "phone": "0634567890",
      "email": "karim@roadside.com",
      "role": "emergency",
      "createdAt": "2025-07-28T23:23:09.074Z"
    },
    {
      "id": 4,
      "name": "oubella assia",
      "phone": "0610472353",
      "email": "assia.ou26@gmail.com",
      "role": "emergency",
      "createdAt": "2025-07-28T23:25:43.873Z"
    }
  ],
  "users": [
    {
      "id": 1,
      "username": "admin1",
      "email": "admin1@roadside.com",
      "role": "admin",
      "status": "active",
      "createdAt": "2025-07-28T23:23:09.074Z"
    },
    {
      "id": 2,
      "username": "superadmin",
      "email": "super@roadside.com",
      "role": "super_admin",
      "status": "active",
      "createdAt": "2025-07-28T23:23:09.074Z"
    },
    {
      "id": 3,
      "username": "operator1",
      "email": "op1@roadside.com",
      "role": "operator",
      "status": "active",
      "createdAt": "2025-07-28T23:23:09.074Z"
    },
    {
      "id": 4,
      "username": "user5",
      "email": "user5@gmail.com",
      "role": "admin",
      "status": "suspended",
      "createdAt": "2025-07-28T23:29:17.079Z"
    }
  ],
  "assignments": [
    {
      "id": 1,
      "requestId": 1,
      "contactId": 1,
      "userId": 3,
      "status": "in_progress",
      "createdAt": "2025-07-28T23:25:20.170Z"
    },
    {
      "id": 2,
      "requestId": 2,
      "contactId": 3,
      "userId": 1,
      "status": "completed",
      "createdAt": "2025-07-28T23:26:21.064Z"
    },
    {
      "id": 3,
      "requestId": 8,
      "contactId": 3,
      "userId": 3,
      "status": "in_progress",
      "createdAt": "2025-07-29T22:16:59.451Z"
    }
  ]
}

============================================================
FILE: package.json
============================================================
{
  "name": "depannage",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["roadside", "rescue", "emergency", "assistance"],
  "author": "",
  "license": "ISC",
  "description": "Roadside Rescue Application with Backend API",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "multer": "^1.4.5-lts.1"
  },
  "devDependencies": {
    "tailwindcss": "^4.1.11",
    "nodemon": "^3.0.1"
  }
}


============================================================
FILE: README.md
============================================================
# Roadside Rescue Application

A complete roadside assistance application with a modern frontend and robust backend API.

## Features

- **User Interface**: Submit emergency roadside assistance requests with photos
- **Admin Dashboard**: Manage incoming requests and assign contacts
- **Super Admin**: Full CRUD operations for contacts, users, and requests
- **Real-time Data**: Persistent storage with SQLite database
- **File Upload**: Image upload support for request documentation
- **Responsive Design**: Works on desktop and mobile devices

## Tech Stack

- **Frontend**: HTML5, CSS3, JavaScript, Tailwind CSS
- **Backend**: Node.js, Express.js
- **Database**: SQLite3
- **File Upload**: Multer
- **Styling**: Glass morphism effects, animations

## Installation

1. **Clone or download the project files**

2. **Install dependencies**:
   ```bash
   npm install
   ```

3. **Start the development server**:
   ```bash
   npm run dev
   ```

4. **Open your browser** and navigate to:
   ```
   http://localhost:3000
   ```

## API Endpoints

### Requests
- `GET /api/requests` - Get all requests with assignments
- `POST /api/requests` - Create a new request (with photo upload)
- `PUT /api/requests/:id/status` - Update request status
- `DELETE /api/requests/:id` - Delete a request

### Contacts
- `GET /api/contacts` - Get all contacts
- `POST /api/contacts` - Create a new contact
- `PUT /api/contacts/:id` - Update a contact
- `DELETE /api/contacts/:id` - Delete a contact

### Users
- `GET /api/users` - Get all users
- `POST /api/users` - Create a new user
- `PUT /api/users/:id` - Update a user
- `DELETE /api/users/:id` - Delete a user

### Assignments
- `GET /api/assignments` - Get all assignments with details
- `POST /api/assignments` - Create or update an assignment

## Database Schema

### Requests Table
- `id` (PRIMARY KEY)
- `userInfo` (TEXT) - User details, car info, location
- `imageUrl` (TEXT) - Path to uploaded photo
- `status` (TEXT) - Request status (Submitted, In Progress, Completed)
- `createdAt` (DATETIME)
- `updatedAt` (DATETIME)

### Contacts Table
- `id` (PRIMARY KEY)
- `name` (TEXT)
- `phone` (TEXT)
- `email` (TEXT)
- `role` (TEXT) - mechanic, towing, emergency, support
- `createdAt` (DATETIME)

### Users Table
- `id` (PRIMARY KEY)
- `username` (TEXT, UNIQUE)
- `email` (TEXT, UNIQUE)
- `role` (TEXT) - admin, super_admin, operator
- `status` (TEXT) - active, inactive, suspended
- `createdAt` (DATETIME)

### Assignments Table
- `id` (PRIMARY KEY)
- `requestId` (INTEGER, FOREIGN KEY)
- `contactId` (INTEGER, FOREIGN KEY)
- `userId` (INTEGER, FOREIGN KEY)
- `status` (TEXT) - assigned, in_progress, completed
- `createdAt` (DATETIME)

## Usage

### User View
1. Fill in your information (name, car model, phone, location)
2. Upload a photo of the problem
3. Submit the request
4. Wait for admin assignment

### Admin View
1. View incoming requests
2. Assign contacts and users to requests
3. Update request status
4. Manage contacts

### Super Admin View
1. Full CRUD operations for all entities
2. User management
3. Contact management
4. Request oversight
5. Assignment management

## File Structure

```
depannage/
├── server.js              # Main server file
├── test.html              # Frontend application
├── package.json           # Dependencies and scripts
├── README.md              # This file
├── uploads/               # Uploaded images (created automatically)
└── roadside_rescue.db     # SQLite database (created automatically)
```

## Development

### Running in Development Mode
```bash
npm run dev
```
This uses nodemon for automatic server restart on file changes.

### Running in Production
```bash
npm start
```

### Environment Variables
- `PORT` - Server port (default: 3000)

## Sample Data

The application comes with sample data:
- 3 sample contacts (mechanic, towing, emergency)
- 3 sample users (admin, super admin, operator)

## Security Features

- File upload validation (images only)
- File size limits (10MB)
- CORS enabled for cross-origin requests
- Input validation and sanitization
- SQL injection prevention with parameterized queries

## Troubleshooting

### Common Issues

1. **Port already in use**: Change the PORT environment variable
2. **Database errors**: Delete `roadside_rescue.db` and restart the server
3. **Upload errors**: Ensure the `uploads` directory exists and is writable

### Logs
Check the console output for detailed error messages and database connection status.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

ISC License 

============================================================
FILE: server.js
============================================================
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Create uploads directory if it doesn't exist
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir);
}

// Configure multer for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB limit
    },
    fileFilter: function (req, file, cb) {
        // Accept only images
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Only image files are allowed!'), false);
        }
    }
});

// Database file path
const dbFile = path.join(__dirname, 'database.json');

// Initialize database
function initializeDatabase() {
    if (!fs.existsSync(dbFile)) {
        const initialData = {
            requests: [],
            contacts: [
                { id: 1, name: 'Ahmed Mechanic', phone: '0612345678', email: 'ahmed@roadside.com', role: 'mechanic', createdAt: new Date().toISOString() },
                { id: 2, name: 'Fatima Towing', phone: '0623456789', email: 'fatima@roadside.com', role: 'towing', createdAt: new Date().toISOString() },
                { id: 3, name: 'Karim Emergency', phone: '0634567890', email: 'karim@roadside.com', role: 'emergency', createdAt: new Date().toISOString() }
            ],
            users: [
                { id: 1, username: 'admin1', email: 'admin1@roadside.com', role: 'admin', status: 'active', createdAt: new Date().toISOString() },
                { id: 2, username: 'superadmin', email: 'super@roadside.com', role: 'super_admin', status: 'active', createdAt: new Date().toISOString() },
                { id: 3, username: 'operator1', email: 'op1@roadside.com', role: 'operator', status: 'active', createdAt: new Date().toISOString() }
            ],
            assignments: []
        };
        fs.writeFileSync(dbFile, JSON.stringify(initialData, null, 2));
        console.log('Database initialized with sample data.');
    }
}

// Database helper functions
function readDatabase() {
    try {
        const data = fs.readFileSync(dbFile, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('Error reading database:', error);
        return { requests: [], contacts: [], users: [], assignments: [] };
    }
}

function writeDatabase(data) {
    try {
        fs.writeFileSync(dbFile, JSON.stringify(data, null, 2));
        return true;
    } catch (error) {
        console.error('Error writing database:', error);
        return false;
    }
}

function getNextId(collection) {
    const db = readDatabase();
    if (db[collection].length === 0) return 1;
    return Math.max(...db[collection].map(item => item.id)) + 1;
}

// Initialize database on startup
initializeDatabase();

// Routes

// Serve the main HTML file
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'test.html'));
});

// Serve uploaded files
app.use('/uploads', express.static('uploads'));

// API Routes

// Requests
app.get('/api/requests', (req, res) => {
    try {
        const db = readDatabase();
        const requests = db.requests.map(req => {
            const assignment = db.assignments.find(a => a.requestId === req.id);
            const contact = assignment ? db.contacts.find(c => c.id === assignment.contactId) : null;
            const user = assignment ? db.users.find(u => u.id === assignment.userId) : null;
            
            return {
                ...req,
                contactName: contact ? contact.name : null,
                contactRole: contact ? contact.role : null,
                userName: user ? user.username : null
            };
        });
        
        // Sort by creation date (newest first)
        requests.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        res.json(requests);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/requests', upload.single('photo'), (req, res) => {
    try {
        const { userInfo } = req.body;
        const imageUrl = req.file ? `/uploads/${req.file.filename}` : null;
        
        const db = readDatabase();
        const newRequest = {
            id: getNextId('requests'),
            userInfo,
            imageUrl,
            status: 'Submitted',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        
        db.requests.push(newRequest);
        writeDatabase(db);
        
        res.json({ 
            ...newRequest,
            message: 'Request created successfully' 
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.put('/api/requests/:id/status', (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;
        
        const db = readDatabase();
        const requestIndex = db.requests.findIndex(r => r.id === parseInt(id));
        
        if (requestIndex === -1) {
            res.status(404).json({ error: 'Request not found' });
            return;
        }
        
        db.requests[requestIndex].status = status;
        db.requests[requestIndex].updatedAt = new Date().toISOString();
        writeDatabase(db);
        
        res.json({ message: 'Request status updated successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/requests/:id', (req, res) => {
    try {
        const { id } = req.params;
        
        const db = readDatabase();
        
        // Remove assignments for this request
        db.assignments = db.assignments.filter(a => a.requestId !== parseInt(id));
        
        // Remove the request
        const requestIndex = db.requests.findIndex(r => r.id === parseInt(id));
        if (requestIndex === -1) {
            res.status(404).json({ error: 'Request not found' });
            return;
        }
        
        db.requests.splice(requestIndex, 1);
        writeDatabase(db);
        
        res.json({ message: 'Request deleted successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Contacts
app.get('/api/contacts', (req, res) => {
    try {
        const db = readDatabase();
        const contacts = db.contacts.sort((a, b) => a.name.localeCompare(b.name));
        res.json(contacts);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/contacts', (req, res) => {
    try {
        const { name, phone, email, role } = req.body;
        
        const db = readDatabase();
        const newContact = {
            id: getNextId('contacts'),
            name,
            phone,
            email,
            role,
            createdAt: new Date().toISOString()
        };
        
        db.contacts.push(newContact);
        writeDatabase(db);
        
        res.json({ 
            ...newContact,
            message: 'Contact created successfully' 
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.put('/api/contacts/:id', (req, res) => {
    try {
        const { id } = req.params;
        const { name, phone, email, role } = req.body;
        
        const db = readDatabase();
        const contactIndex = db.contacts.findIndex(c => c.id === parseInt(id));
        
        if (contactIndex === -1) {
            res.status(404).json({ error: 'Contact not found' });
            return;
        }
        
        db.contacts[contactIndex] = { ...db.contacts[contactIndex], name, phone, email, role };
        writeDatabase(db);
        
        res.json({ message: 'Contact updated successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/contacts/:id', (req, res) => {
    try {
        const { id } = req.params;
        
        const db = readDatabase();
        
        // Remove assignments that reference this contact
        db.assignments = db.assignments.filter(a => a.contactId !== parseInt(id));
        
        // Remove the contact
        const contactIndex = db.contacts.findIndex(c => c.id === parseInt(id));
        if (contactIndex === -1) {
            res.status(404).json({ error: 'Contact not found' });
            return;
        }
        
        db.contacts.splice(contactIndex, 1);
        writeDatabase(db);
        
        res.json({ message: 'Contact deleted successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Users
app.get('/api/users', (req, res) => {
    try {
        const db = readDatabase();
        const users = db.users.sort((a, b) => a.username.localeCompare(b.username));
        res.json(users);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/users', (req, res) => {
    try {
        const { username, email, role, status } = req.body;
        
        const db = readDatabase();
        const newUser = {
            id: getNextId('users'),
            username,
            email,
            role,
            status,
            createdAt: new Date().toISOString()
        };
        
        db.users.push(newUser);
        writeDatabase(db);
        
        res.json({ 
            ...newUser,
            message: 'User created successfully' 
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.put('/api/users/:id', (req, res) => {
    try {
        const { id } = req.params;
        const { username, email, role, status } = req.body;
        
        const db = readDatabase();
        const userIndex = db.users.findIndex(u => u.id === parseInt(id));
        
        if (userIndex === -1) {
            res.status(404).json({ error: 'User not found' });
            return;
        }
        
        db.users[userIndex] = { ...db.users[userIndex], username, email, role, status };
        writeDatabase(db);
        
        res.json({ message: 'User updated successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/api/users/:id', (req, res) => {
    try {
        const { id } = req.params;
        
        const db = readDatabase();
        
        // Remove assignments that reference this user
        db.assignments = db.assignments.filter(a => a.userId !== parseInt(id));
        
        // Remove the user
        const userIndex = db.users.findIndex(u => u.id === parseInt(id));
        if (userIndex === -1) {
            res.status(404).json({ error: 'User not found' });
            return;
        }
        
        db.users.splice(userIndex, 1);
        writeDatabase(db);
        
        res.json({ message: 'User deleted successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Assignments
app.get('/api/assignments', (req, res) => {
    try {
        const db = readDatabase();
        const assignments = db.assignments.map(assignment => {
            const request = db.requests.find(r => r.id === assignment.requestId);
            const contact = db.contacts.find(c => c.id === assignment.contactId);
            const user = db.users.find(u => u.id === assignment.userId);
            
            return {
                ...assignment,
                userInfo: request ? request.userInfo : null,
                imageUrl: request ? request.imageUrl : null,
                requestStatus: request ? request.status : null,
                contactName: contact ? contact.name : null,
                contactRole: contact ? contact.role : null,
                userName: user ? user.username : null
            };
        });
        
        // Sort by creation date (newest first)
        assignments.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        res.json(assignments);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/assignments', (req, res) => {
    try {
        const { requestId, contactId, userId, status } = req.body;
        
        const db = readDatabase();
        
        // Check if assignment already exists for this request
        const existingAssignmentIndex = db.assignments.findIndex(a => a.requestId === parseInt(requestId));
        
        if (existingAssignmentIndex !== -1) {
            // Update existing assignment
            db.assignments[existingAssignmentIndex] = {
                ...db.assignments[existingAssignmentIndex],
                contactId: parseInt(contactId),
                userId: parseInt(userId),
                status
            };
        } else {
            // Create new assignment
            const newAssignment = {
                id: getNextId('assignments'),
                requestId: parseInt(requestId),
                contactId: parseInt(contactId),
                userId: parseInt(userId),
                status,
                createdAt: new Date().toISOString()
            };
            db.assignments.push(newAssignment);
        }
        
        // Update request status to 'In Progress'
        const requestIndex = db.requests.findIndex(r => r.id === parseInt(requestId));
        if (requestIndex !== -1) {
            db.requests[requestIndex].status = 'In Progress';
            db.requests[requestIndex].updatedAt = new Date().toISOString();
        }
        
        writeDatabase(db);
        
        res.json({ message: 'Assignment created/updated successfully' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({ error: 'Route not found' });
});

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
    console.log('Database file:', dbFile);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('Shutting down server...');
    process.exit(0);
});